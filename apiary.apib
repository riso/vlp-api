FORMAT: 1A
HOST: https://webapps.vlp.com/

# VLP v1

Service Oriented Architecture specified for the VLP project.

# VLP [/]

This resource does not have any attributes. Instead it offers the initial
API affordances in the form of the links in the JSON body.

Dates are always specified as `yyyy-mm-dd`, times as `HH:mm:ss:SSS`, according to
[Java SimpleDateFormat](https://docs.oracle.com/javase/8/docs/api/java/text/SimpleDateFormat.html).

**TBD: time zone?**

## Retrieve the Entry Point [GET]

+ Response 200 (application/json)

        {
            "profile_url": "/profiles",
            "selections_url": "/selections/my",
            "events_url": "/events",
            "products_url": "/products",
            "documents_url": "/documents",
            "ar_url": "/ar",
            "contacts_url": "/contacts"
        }

+ Response 500
    Returned when a generic error occours.

    + Body




#######################
# Group IS01 - Profiles
#######################

Resources related to user's profile in the API.

## Profiles collections [/profiles{?consultantId}{?page}]

+ Attributes (Collection)
  + profiles (array[Profile]) - array of user accessible profiles

### List Profiles [GET]
List user profiles. This can be sliced and filtered in order to return only
profiles associated with a given `consultantId`.

+ Parameters
    + page: 1 (optional, number) - The page of profiles to return
    + consultantId: 1 (optional, number) - ID of the consultant associated with this user

+ Response 200 (application/json)

    + Headers

            Link: </profiles?page=2>; rel="next"

    + Attributes (Profiles collections)

+ Response 500
    Returned when a generic error occours.

    + Body

### Create Profile [POST]
Create a user profile.


+ Request (application/json)
    + Attributes (Profile Create)

+ Response 201

    + Headers

            Location: /profiles/1

+ Response 500
    Returned when a generic error occours.

    + Body

## Profile [/profiles/{id}]

+ Parameters
    + id: 1 (required, number) - ID of the user

+ Attributes (Profile Base)
    + id: 1 (required, number) - ID of the user profile

### Read Profile [GET]

+ Response 200 (application/json)

    + Attributes (Profile)

+ Response 500
    Returned when a generic error occours.

    + Body

### Update Profile [PUT]

+ Request (application/json)

    + Attributes (Profile Update)

+ Response 200

+ Response 500
    Returned when a generic error occours.

    + Body

### Delete Profile [DELETE]

+ Response 204

+ Response 500
    Returned when a generic error occours.

    + Body

## User personal profile [/profiles/my]

Used to retrieve user personal details.

### Read Profile [GET]

+ Response 200 (application/json)
  + Attributes (Profile)

+ Response 500
    Returned when a generic error occours.

    + Body

## Profile Addresses collections [/profiles/{userId}/addresses{?page}]

+ Attributes
  + count: 1 (number) - total number of addresses
  + addresses (array[Profile Address]) - array of user addresses

### List Profile Addresses [GET]

+ Parameters
  + userId: 1 (required, number) - ID of the user
  + page: 1 (optional, number) - The page of addresses to return

+ Response 200 (application/json)

      + Headers

              Link: </profiles/1/addresses?page=2>; rel="next"

      + Attributes (Profile Addresses collections)

+ Response 500
    Returned when a generic error occours.

    + Body

### Create Profile Address [POST]

+ Request (application/json)
    + Attribute (Profile Address Create)

+ Response 201

    + Headers

            Location: /profiles/1/addresses/1

+ Response 500
    Returned when a generic error occours.

    + Body

## Profile Address [/profiles/{userId}/addresses/{id}]

+ Parameters
    + userId: 1 (number) - ID of the user
    + id: 1 (number) - ID of the address

+ Attributes (Profile Address Base)
    + id: 1 (required, number) - ID of the address

### Read Profile Address [GET]

+ Response 200 (application/json)

    + Attributes (Profile Address)

+ Response 500
    Returned when a generic error occours.

    + Body

### Update Profile Address [PUT]

+ Request (application/json)

    + Attributes (Profile Address Update)

+ Response 200

+ Response 500
    Returned when a generic error occours.

    + Body

### Delete Profile Address [DELETE]

+ Response 204

+ Response 500
    Returned when a generic error occours.

    + Body



#########################
# Group IS15 â€“ Selections
#########################

Resources related to user's selected products.
An user can list its selected products, create a selection for his session and then edit it.

**Note**: Only one product per category (e.g. serramenti, pavimenti) can be selected
at a given time. If another product of the same category is selected, it will replace
the currently selected product.

## Selections collections [/selections/{userId}]

The following methods allow the user to interact with selected products.

+ Parameters
    + userId: 1 (number) - ID of the user owning the selections

+ Attributes
    + userId: 1 (number) - ID of the user owning the selections
    + selections (array[Selection]) - selections perfomed by the user

### List Selections [GET]

This action retrieves the list of selected products.

+ Response 200 (application/json)

    + Attributes (Selections collections)

+ Response 500
    Returned when a generic error occours.

    + Body

### Create Selection [POST]

This action is used to create a new selection in the user's selection object.
It will replace his current selection if he already has one in the same category.

**TBD: emit a warning when replacing a selection?**

+ Request (application/json)

  + Attributes (Selection Write)

+ Response 201

    + Headers

            Location: /selections/{userId}/serramenti

+ Response 500
    Returned when a generic error occours.

    + Body

## Selection [/selections/{userId}/{type}]

These actions operate on the selection of the required `type`.

+ Parameters
    + userId: 1 (number) - ID of the user owning the selections
    + type: serramenti (enum[string]) - type of selection to operate on

        + Members
            + `serramenti`
            + `pavimenti`
            + `**TBD**`

### Read Selection [GET]

+ Response 200 (application/json)

    + Attributes (Selection)

+ Response 500
    Returned when a generic error occours.

    + Body

### Update Selection [PUT]

+ Request (application/json)

    + Attributes (Selection Write)

+ Response 200

+ Response 500
    Returned when a generic error occours.

    + Body

### Delete Selection [DELETE]

+ Response 204

+ Response 500
    Returned when a generic error occours.

    + Body


########################
# Group IS03 - Documents
########################

Resources related to user's documents in the API.
An user can list its previous documents, create a document and then edit it.

Document acts as a "super-class" for quotes and orders.

## Documents collections [/documents{?userId}{?page}{?type}]

The following methods allow the user to interact with documents.

+ Attributes (Collection)
    + documents (array[Document]) - array of documents accessible by the user

### List Documents [GET]

This action retrieves the list of documents accessible by the user,
possibly sliced and filtered only for the specified `userId` and/or `type`.

+ Parameters
    + userId: 1 (optional, number) - Filter documents created by the specified `userId`.
    + page: 1 (optional, number) - The page of documents to return.
    + type: quote (optional, enum[string]) - Filter only specified type of document.
        + Members
            + quote
            + order


+ Response 200 (application/json)

    + Headers

            Link: </documents?page=2>; rel="next"

    + Attributes (Documents collections)

+ Response 500
    Returned when a generic error occours.

    + Body

### Create Document [POST]

This method allows the user to create a new document.

If no `userId` is given, it is assumed that the document is created for the current user.

**Note**: the returned `Location` header points to the created document ID,
not the given FP Dealer ID.

+ Request (application/json)
    + Attributes (Document Create)

+ Response 201

    + Headers

            Location: /documents/2

+ Response 500
    Returned when a generic error occours.

    + Body

## Document [/documents/{id}]

+ Parameters
    + id: 1 (required, string) - ID of the document

+ Attributes (Document Base)
    + id: 1 (required, number) - ID of the document

### Read Document [GET]

See the details of a given document. This returns the single document
istances with its historic statuses.

+ Response 200 (application/json)

    + Attributes (Document Read)

+ Response 500
    Returned when a generic error occours.

    + Body

### Update Document [PUT]

This action allows the user to change an existing document.

**Note**: When the current status of a document is changed, its historic
statuses will have to be recorded. Manual changes on historic statuses are not
supported.

+ Request (application/json)
    + Attributes (Document Update)

+ Response 200

+ Response 500
    Returned when a generic error occours.

    + Body

### Delete Document [DELETE]

+ Response 204

+ Response 500
    Returned when a generic error occours.

    + Body

## Document Files collections [/documtents/{id}/files]

### Create Document File [POST]

This actions allow adding a new file to an existing document.

+ Request (application/json)
    + Attributes (Document File Create)

+ Response 201

    + Headers

            Location: /documents/2/files/pdf

+ Response 500
    Returned when a generic error occours.

    + Body

## Document File [/documents/{id}/files/{format}]

API route for interacting with documents' files.

Create and update actions expect the file stream as input.

**Note**: when the available files change (CD actions) also the available
`formats` field on the document will get updated.

+ Parameters
    + id: 1 (required, string) - ID of the document
    + format: pdf (required, string) - format of the file with which we're interacting

+ Attributes (Document File Base)
    + id: 1 (required, number) - ID of the document

### Read Document File [GET]
Retrieve the document (file stream).

+ Response 200 (application/stream)

+ Response 500
    Returned when a generic error occours.

    + Body

### Update Document File [PUT]

+ Request (application/json)
    + Attributes (Document File Update)

+ Response 200

+ Response 500
    Returned when a generic error occours.

    + Body

### Delete Document File [DELETE]

+ Response 204

+ Response 500
    Returned when a generic error occours.

    + Body



#####################
# Group IS12 - Events
#####################

**TBD: a user could have multiple wishlist. This does not seem to be the case
with the current DB diagram**

## Events collections [/events{?userId}{?page}{?type}]

+ Attributes (Collection)
    + events (array[Event]) - array of returned events

### List Events [GET]

Retrive content (e.g. stories, products) events, possibly filtered by `userId`
and/or `type` and sliced.

+ Parameters
    + userId: 1 (optional, number) - Filter events created by the specified user
    + type: vote (enum[string]) - Filter only specified type of event
        + Members
            + view - content visualization
            + vote - content up or down vote
            + desire - content desired
    + page: 1 (optional, number) - The page of events to return

+ Response 200 (application/json)

    + Headers

            Link: </events?page=2>; rel="next"

    + Attributes (Events collections)

+ Response 500
    Returned when a generic error occours.

    + Body

### Create Event [POST]

+ Request (application/json)
    + Attribute (Event Create)

+ Response 201

    + Headers

            Location: /events/1

+ Response 500
    Returned when a generic error occours.

    + Body

## Event [/events/{id}]

+ Attribute (Event Base)
    + id: 1 (required, number) - ID of the event

+ Parameters
    + id: 1 (required, string) - ID of the event

### Read Event [GET]

+ Response 200 (application/json)
    + Attributes (Event)

+ Response 500
    Returned when a generic error occours.

    + Body

### Update Event [PUT]

Updating an "event" is a weird idea. Yet it makes sense when an event is
intended as a user action (e.g. like/dislike). For instance, a user can first
like a content (creating an event on the specified content) and then dislike it,
updating his previous event.

+ Request (application/json)
    + Attributes (Event Update)

+ Response 200

+ Response 500
    Returned when a generic error occours.

    + Body

### Delete Event [DELETE]

+ Response 204

+ Response 500
    Returned when a generic error occours.

    + Body



#######################
# Group IS17 - Products
#######################

API group used to handle products.

## Products collections [/products]

+ Attributes (Collection)
    + products (array[Product]) - array of products accessible by the user

### Find products [GET /find{?commerceSKU}{?attributes}]

Action that can be used to find a product in the repository starting
from the commerce SKU and the selections (map of attributes).

This action can be used to retrieve the Product repository ID that can later be used to
retrieve images and renderings.

Only one Product is exptected to be returned, but for consistency with other
collection actions we return an array.

+ Parameters
    + commerceSKU: 1 (string) - SKU on the commerce
    + attributes: {"color": "black", "isolation": "high", "material": "wood"} (object) -
      attribute selection on the commerce SKU product

+ Response 200 (application/json)
    + Attributes (Products collections)

+ Response 500
    Returned when a generic error occours.

    + Body

### Create Product [POST]

+ Request (application/json)
    + Attribute (Product Create)

+ Response 201

    + Headers

            Location: /products/1

+ Response 500
    Returned when a generic error occours.

    + Body
    
## Product [/products/{id}]

+ Attributes (Product Base)
    + id: 5 (required, string) - SKU of the product in the product repository
    
+ Parameters
    + id: 5 (required, string) - SKU of the product 
    
### Read Product [GET]

+ Response 200 (application/json)
    + Attributes (Product)

+ Response 500
    Returned when a generic error occours.

    + Body

### Update Product [PUT]

+ Request (application/json)
    + Attributes (Product Update)

+ Response 200

+ Response 500
    Returned when a generic error occours.

    + Body

### Delete Product [DELETE]

+ Response 204

+ Response 500
    Returned when a generic error occours.

    + Body

#############################
# Group IS02 - Product Images
#############################

Sub-resource of a product resource. First find the product SKU, then interact
with its images.

## Product Images collections [/products/{productId}/images]

+ Parameters
    + productId: 1 (required, number) - SKU on the product repository


### Create Product Image [POST]

+ Request (application/json)

    + Attributes (Product Image Write)

+ Response 201

    + Headers

            Location: /products/{productId}/images/main

+ Response 500
    Returned when a generic error occours.

    + Body


## Product Image [/products/{productId}/images/{type}/{?index}]

+ Parameters
    + type: main (required, enum[string]) - type of the image being required.
        + Members
            + main
            + banner
            + carousel
            + details
    + productId: 1 (required, string) - SKU on the product repository.
    + index: 1 (number) - for image lists (e.g. carousels) the index of the image.

### Read Product Image [GET]
Retrieve the image (file stream).

+ Response 200 (image/png)

+ Response 500
    Returned when a generic error occours.

    + Body


### Update Product Image [PUT]

+ Request (application/json)
    + Attributes(Product Image Write)

+ Response 200

+ Response 500
    Returned when a generic error occours.

    + Body

### Delete Product Image [DELETE]

+ Response 204

+ Response 500
    Returned when a generic error occours.

    + Body



#################################
# Group IS08 - Product Renderings
#################################

Sub-resource of a product resource. First find the product SKU, then interact
with its rendering. For each product a single rendering is assumed. A rendering
consists of default positioning, rotation and scale of a product and two series
of images for the rendering materials and parts.

## Product Rendering [/products/{productId}/rendering]

**TBD: the entire model for a rendering is currently unknown. We assume
something similar to Object table in Scenes repository.**

+ Parameters
    + productId: 1 (string) - SKU on the product repository

### Create Product Rendering [POST]

+ Request (application/json)
    + Attributes (Product Rendering Write)

+ Response 201

    + Headers

            Location: /products/1/rendering

+ Response 500
    Returned when a generic error occours.

    + Body

### Read Product Rendering [GET]

+ Response 200 (application/json)
    + Attributes (Product Rendering)

+ Response 500
    Returned when a generic error occours.

    + Body

### Update Product Rendering [PUT]

+ Request (application/json)
    + Attributes (Product Rendering Write)

+ Response 200

+ Response 500
    Returned when a generic error occours.

    + Body

### Delete Product Rendering [DELETE]

+ Response 204

+ Response 500
    Returned when a generic error occours.

    + Body

## Product Rendering Material [/products/{productId}/rendering/materials/{index}]

**TBD: the entire model for a rendering material is currently unknown.
We assume a material to be an image.**

+ Parameters
    + productId: 1 (string) - SKU on the product repository
    + index: 2 (number) - nth material

+ Attributes (Product Rendering Detail)

### Create Product Rendering Material [POST]

+ Request (application/json)
    + Attributes (Product Rendering Detail Write)

+ Response 201

    + Headers

            Location: /products/1/rendering/materials/1

+ Response 500
    Returned when a generic error occours.

    + Body

### Read Product Rendering Material [GET]
Retrieve the image (file stream).

+ Response 200 (application/png)

+ Response 500
    Returned when a generic error occours.

    + Body

### Update Product Rendering Material [PUT]

+ Request (application/json)
    + Attributes (Product Rendering Detail Write)

+ Response 200

+ Response 500
    Returned when a generic error occours.

    + Body

### Delete Product Rendering Material [DELETE]

+ Response 204

+ Response 500
    Returned when a generic error occours.

    + Body

## Product Rendering Part [/products/{productId}/rendering/parts/{index}]

**TBD: the entire model for a rendering part is currently unknown.
We assume a part to be an image.**

+ Parameters
    + productId: 1 (string) - SKU on the product repository
    + index: 2 (number) - interact with the nth part

+ Attributes (Product Rendering Detail)

### Create Product Rendering Part [POST]

+ Request (application/json)
    + Attributes (Product Rendering Detail Write)

+ Response 201

    + Headers

            Location: /products/1/rendering/parts/1

+ Response 500
    Returned when a generic error occours.

    + Body

### Read Product Rendering Part [GET]
Retrieve the image (file stream).

+ Response 200 (application/png)

+ Response 500
    Returned when a generic error occours.

    + Body

### Update Product Rendering Part [PUT]

+ Request (application/json)
    + Attributes (Product Rendering Detail Write)

+ Response 200

+ Response 500
    Returned when a generic error occours.

    + Body

### Delete Product Rendering Part [DELETE]

+ Response 204

+ Response 500
    Returned when a generic error occours.

    + Body



#################
# Group IS09 - 3D
#################

API group used to handle objects managed by the augmented reality 3D viewer.

The main resources managed are:

+ `Object`, an object rendered in a 3D environment
+ `Scene`, a 3D environment consisting of multiple objects
+ `Surface`

## Scenes collections [/ar/scenes{?userId}{?page}]

+ Attributes (Collection)
    + scenes (array[Scene]) - array of scenes accessible by the user

### List Scenes [GET]

+ Parameters
    + userId: 1 (optional, number) - filter scenes for the specified user
    + page: 1 (optional, number) - slice scenes

+ Response 200 (application/json)

    + Attributes (Scenes collections)

+ Response 500
    Returned when a generic error occours.

    + Body

### Create Scene [POST]

+ Request (application/json)
    + Attributes (Scene Create)

+ Response 201

    + Headers

            Location: /ar/scenes/1

+ Response 500
    Returned when a generic error occours.

    + Body

## Scene [/ar/scenes/{id}]

+ Attributes (Scene Base)
    + id: 1 (required, string) - ID of the scene.

+ Parameters
    + id: 1 (string) - ID of the scene.

### Read Scene [GET]

+ Response 200 (application/json)

    + Attributes (Scene)

+ Response 500
    Returned when a generic error occours.

    + Body

### Update Scene [PUT]

+ Request (application/json)

    + Attributes (Scene Update)

+ Response 200

+ Response 500
    Returned when a generic error occours.

    + Body

### Delete Scene [DELETE]

+ Response 204

+ Response 500
    Returned when a generic error occours.

    + Body

## Objects collections [/ar/objects{?page}{?sceneId}]

**TBD: on the DB schema there is no mention of components
(static files or references to them). How do we manage those?**

+ Attributes (Collection)
    + objects (array[Object]) - array of objects accessible by the user

### List Objects [GET]

+ Parameters
    + page: 1 (optional, number) - slice scene objects
    + sceneId: 1 (optional, string) - Filter only object "belonging" to the specified scene

+ Response 200 (application/json)
    + Attributes (Objects collections)

+ Response 500
    Returned when a generic error occours.

    + Body

### Create Object [POST]
Create a new Object. If `sceneId` is specified, it is implied that the object
will also be "added" to the scene.

+ Request (application/json)
    + Attributes (Object Create)

+ Response 201

    + Headers

            Location: /ar/objects/3

+ Response 500
    Returned when a generic error occours.

    + Body

## Object [/ar/objects/{id}]

+ Attributes (Object Base)
    + id: 1 (required, string)

+ Parameters
    + id: 1 (required, string) - ID of the object

### Read Object [GET]

+ Response 200 (application/json)

    + Attributes (Object)

+ Response 500
    Returned when a generic error occours.

    + Body

### Update Object [PUT]

+ Request (application/json)

    + Attributes (Object Update)

+ Response 200

+ Response 500
    Returned when a generic error occours.

    + Body

### Delete Object [DELETE]

+ Response 204

+ Response 500
    Returned when a generic error occours.

    + Body


## Surfaces collections [/ar/scenes/{sceneId}/surfaces{?page}]

+ Attributes (Collection)
    + surfaces (array[Surface]) - array of surfaces accessible by the user

### List Surfaces [GET]

+ Parameters
    + sceneId: 5 (required, number) - ID scene
    + page: 1 (number) - slice surfaces

+ Response 200 (application/json)

    + Headers

            Link: </ar/scenes/1/surfaces?page=2>; rel="next"

    + Attributes (Surfaces collections)

+ Response 500
    Returned when a generic error occours.

    + Body

### Create Surface [POST]

+ Request (application/json)
    + Attribute (Surface Create)

+ Response 201

    + Headers

            Location: /ar/scenes/1/surfaces/1

+ Response 500
    Returned when a generic error occours.

    + Body

## Surface [/ar/scenes/{sceneId}/surfaces/{id}]

+ Attributes (Surface Base)
    + id: 1 (number) - ID of the surface

+ Parameters
    + sceneId: 5 (required, number) - ID scene
    + id: 1 (required, string) - ID of the surface

### Read Surface [GET]

+ Response 200 (application/json)
    + Attribute (Surface)

+ Response 500
    Returned when a generic error occours.

    + Body

### Update Surface [PUT]

+ Request (application/json)
    + Attribute (Surface Update)

+ Response 200

+ Response 500
    Returned when a generic error occours.

    + Body

### Delete Surface [DELETE]

+ Response 204

+ Response 500
    Returned when a generic error occours.

    + Body



###############################
# Group IS07 - Contact Requests
###############################

API group used to handle users' contact requests.

## Contacts collections [/contacts{?userId}{?page}]

+ Attributes (Collection)
  + contacts (array[Contact]) - array of contact requests accessible by the user

### List Contacts [GET]

+ Parameters
    + userId: 1 (optional, string) - filter contact requests for the specified user
    + page: 1 (optional, number) - slice contact requests

+ Response 200 (application/json)
    + Attributes (Contacts collections)

+ Response 500
    Returned when a generic error occours.

    + Body

### Create Contact [POST]

+ Request (application/json)
    + Attributes (Contact Create)

+ Response 201

    + Headers

            Location: /contacts/1

+ Response 500
    Returned when a generic error occours.

    + Body

## Contact [/contacts/{id}]

+ Parameters
    + id: 1 (required, string) - ID of the contact request with which interact

+ Attributes (Contact Base)
    + id: 1 (required, number)

### Read Contact [GET]

+ Response 200 (application/json)
    + Attributes (Contact)

+ Response 500
    Returned when a generic error occours.

    + Body

### Update Contact [PUT]

+ Request (application/json)
    + Attributes (Contact Update)

+ Response 200

+ Response 500
    Returned when a generic error occours.

    + Body

### Delete Contact [DELETE]

+ Response 204

+ Response 500
    Returned when a generic error occours.

    + Body






# Data Structures


## Write Base (object)
+ backends: `{"cache": true, "db": true}` (required, object) - to which backends the resource is being saved to.
    + Properties
        + cache: true (boolean)
        + db: true (boolean)
        + ldap (boolean)
        + connections (boolean)
        + commerce (boolean)

## Collection (object)
+ count: 1 (number) - total number of resources that can be accessed by the user

## Profile Base (object)
+ consultantId: 1 (number) - ID of the consultant associated with this user
+ email: `v.ponte@wintech.it` (required, string)
+ firstName: Valerio (string)
+ lastName: Ponte (string)
+ phoneNumber: `0039-3401004285` (string) - A string with the following format: `<4 digits country code>-<phone number>`
+ imageUrl: `https://www.vlp.com/logo.png` (string) - user profile image
+ description (string)
+ area: Milano (string) - position shared by the user
+ address (string) - **TBD: what is this?**
+ city (string) - **TBD: what is this?**
+ type: client (enum[string]) - profile type **TBD: needed?**
    + client (string) - registered user with email
    + lead (string) - unregistered user with email
    + anonymous (string) - unregistered user without email

## Profile Create (Profile Base)
+ Include Write Base

## Profile Update (Profile)
+ Include Write Base

## Profile Address Base (object)
+ userId: 1 (required, number) - ID of the user owning this address
+ type: billing (required, enum[string]) **TBD: define complex type (postal+Billing)**
    + postal
    + billing
    + postalBilling - **TBD: probably not the best idea**
+ description: `My home address` (string)
+ address: `Piazza Dergano 9` (required, string)
+ zipCode: 20158 (required, number)
+ city: Milano (required, string)
+ country: Italia (required, string)
+ phoneNumber: `0039-3401004285` (string) - A string with the following format: `<4 digits country code>-<phone number>`
+ vatCode (string)
+ fiscalCode (string)
+ companyName (string)
+ firstName (string) - **TBD: why?**
+ lastName (string) - **TBD: why?**
+ email (string) - **TBD: why?**

## Profile Address Create (Profile Address Base)
+ Include Write Base

## Profile Address Update (Profile Address)
+ Include Write Base


## Selection (object)
+ type: serramenti (required, enum) - type of the selection
    + serramenti
    + pavimenti
    + TBD
+ sku: 1 (required, string) - the product commerce SKU for which the quote is being prepared
+ attributes: `{"color": "black", "isolation": "high"}` (object) - an object of attributes selected on the product. An attribute is represented as a key/value pair.

    + Properties
        + color: black
        + isolation: high
        + material: wood
        + attribute4: value4

+ alternate_products: `["2", "3"]` (array) - an array of alternative products (recommended by commerce). Each string is a commerce SKU.

    + Items
        + 2
        + 3

+ alternate_selections: `["3", "4"]` (array) - an array of alternative products selected by the user to be seen in the augmented reality. **TBD: still neded?**

    + Items
        + 3
        + 4

## Selection Write (Selection)
+ Include Write Base


## Document Base (object)
+ userId: 1 (number) - ID of the user owning the document
+ type: order (required, enum) - type of the document
    + Members
        + order
        + quote
+ formats: `["xml", "pdf"]` (array) - list of available file formats
    + Items
        + xml
        + pdf
+ status (enum[string]) - current status of the document
    + Members
        + proposal
        + confirmed
        + editable - if the document can be still modified or has been frozen

+ valid (string) - **TBD: what is this?**
+ documentReference: 3 (string) - reference to another Document (e.g. quote from which an order originated)
+ documentCode: 1 (string) - fpDealerID in case of document of type `quote`

## Document Create (Document Base)
+ Include Write Base

## Document Read (Document)
+ status_hist (required, object) - past statuses of the document
    + Properties
       + *20150501*: proposal
       + *20150508*: confirmed

## Document Update (Document)
+ Include Write Base

## Document File Base (object)
+ format: pdf (required, string) - format of the file with which we're interacting
+ file: `a2F3YWlpIGRvY3VtZW50Cg==` (required, string) - serialized stream representing the file.
+ url: `https://www.vlp.it/document/id` (required, string) - url of the file

## Document File Create (Document File Base)
+ Include Write Base

## Document File Update (Document File)
+ Include Write Base


## Event Base (object)
+ userId: 1 (number) - ID of the user associated with the event
+ contentId: 1 (required, string) - ID of the content for which the event is being recorded
+ type: vote (required, enum) - type of event
    + view
    + vote
    + desire
+ value: `-1` (number) - value of the event (only valid for event of type `vote`)
+ title: `Storia 1` (required, string)
+ URL: `https://www.vlp.com/wps/portal/stories/storia/1` (required, string)
+ image_URL: `https://www.vlp.com/logo.png` (required, string)
+ timestamp: 546757636535 (number) - date of the event (**TBD: format?**)

## Event Create (Event Base)
+ Include Write Base

## Event Update (Event)
+ Include Write Base

## Product Base (object)
+ default_scene: kitchen (required, string) - default scene that can be used to render this product in the 3D viewer
+ availability: true (required, boolean)

## Product Create (Product Base)
+ Include Write Base

## Product Update (Product)
+ Include Write Base

## Product Image (object)
+ type: main (required, enum) - type of the image.
    + Members
        + main
        + banner
        + carousel
        + details
+ productId: 1 (required, number) - SKU on the product repository.
+ index: 1 (number) - for image lists (e.g. carousels) the index of the image.
+ file: `a2F3YWlpIGRvY3VtZW50Cg==` (required, string) - serialized stream representing the image.

## Product Image Write (Product Image)
+ Include Write Base


## Product Rendering (object)
+ model (string) - 3D model
+ materials: 2 (number) - number of materials composing the rendering
+ parts: 2 (number) - number of parts composing the rendering
+ x (number) - default X axis position for the rendering
+ y (number) - default Y axis position for the rendering
+ z (number) - default Z axis position for the rendering
+ rx (number) - default rotation on X axis for the rendering
+ ry (number) - default rotation on Y axis for the rendering
+ rz (number) - default rotation on Z axis for the rendering
+ s (number) - default scale of the rendering

## Product Rendering Write (Product Rendering)
+ Include Write Base

## Product Rendering Detail (object)
+ productId: 1 (required, string) - SKU on the product repository.
+ index: 2 (required, number) - nth detail (material or part).
+ file: `a2F3YWlpIGRvY3VtZW50Cg==` (required, string) - serialized stream representing the image.

## Product Rendering Detail Write (Product Rendering Detail)
+ Include Write Base


## Scene Base (object)
+ description: `Scene description` (required, string)
+ userId: 1 (number) - ID of the user owning the scene. May be null for default scenes.
+ height: 10.57 (number)
+ width: 60.24 (number)
+ length: 14.2 (number)
+ sceneType (enum) - Type of the scene. **TBD: enum values**
    + Members
        + `kitchen`
        + `livingroom`
+ set (string)
+ time (string)
+ weather (string)
+ season (string)
+ sound (string) - **TBD: URL to a sound file?**

## Scene Create (Scene Base)
+ Include Write Base

## Scene Update (Scene)
+ Include Write Base

## Object Base (object)
+ sceneId (string) - ID of the associated scene, if present
+ objectId: 6 (string) - **TBD: required?**
+ productId: 5 (string)
+ category (string)
+ type (string)
+ x: 10.6 (number) - position of the object on X axis
+ y: 1.6 (number) - position of the object on Y axis
+ z: 5.6 (number) - position of the object on Z axis
+ rx: 100.6 (number) - rotation of the object on X axis
+ ry: 10.6 (number) - rotation of the object on Y axis
+ rz: 50.6 (number) - rotation of the object on Z axis
+ s: 3 (number) - object scaling

## Object Create (Object Base)
+ Include Write Base

## Object Update (Object)
+ Include Write Base

## Surface Base (object)
+ sceneId: 1 (required, number) - ID of the scene owning the surface
+ surfaceId: 5 (string) - ID of the surface in the 3D viewer. **TBD: required?**
+ materialId: 3 (string)

## Surface Create (Surface Base)
+ Include Write Base

## Surface Update (Surface)
+ Include Write Base


## Contact Base (object)
+ userId: 1 (number) - ID of the user associated with the contact request
+ addressId: 1 (number) - ID of the address associated with the contact request
+ description: `Hi, please contact me` (string)
+ reason (enum)
+ date: `2015-05-01` (string)
+ timestamp: 123451325 (number)
+ timeZone (string) - user range availabilty
+ note: `Hi, please contact me` (string)
- status (enum) - status of contact request (completed, pending)
    + `completed`
    + `pending`

## Contact Create (Contact Base)
+ Include Write Base

## Contact Update (Contact)
+ Include Write Base
