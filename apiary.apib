FORMAT: 1A
HOST: https://webapps.vlp.com/

# VLP v1

Service Oriented Architecture specified for the VLP project.

# VLP [/{?backends}]

This resource does not have any attributes. Instead it offers the initial
API affordances in the form of the links in the JSON body.

It is recommend to follow the “url” link values,
[Link](https://tools.ietf.org/html/rfc5988) or Location headers where
applicable to retrieve resources. Instead of constructing your own URLs,
to keep your client decoupled from implementation details.

Dates are always specified as `yyyy-mm-dd`, times as `HH:mm:ss:SSS`, according to 
[Java SimpleDateFormat](https://docs.oracle.com/javase/8/docs/api/java/text/SimpleDateFormat.html).

**TBD: time zone?**

+ Parameters
    + backends: ["cache", "db"] (required, array) from which backends the resource is coming from. Possible values are (`cache`, `db`, `ldap`, `connections`, `commerce`)

+ Attributes
    + backends: `["cache", "db"]` (required, array[string]) - to which backends the resource is being saved to. Possible values are (`cache`, `db`, `ldap`, `connections`, `commerce`)

## Retrieve the Entry Point [GET]

+ Response 200 (application/json)

        {
            "profile_url": "/profiles",
            "selections_url": "/selections/my",
            "quotes_url": "/quotes",
            "likes_url": "/likes",
            "views_url": "/views",
            "images_url": "/images",
            "documents_url": "/documents",
            "ar_url": "/ar",
            "contacts_url": "/contacts"
        }

# Group IS01 - Profile

Resources related to user's profile in the API.

A Profile object contains basic profiles attributes. It has the following attributes:

+ userName
+ mail
+ firstName
+ lastName
+ imageURL
+ area - position shared by the user
+ postalAddress
+ billingAddress
+ GUID - WAS session ID
+ type - client or lead

## Profiles collections [/profiles{?page}]

+ Parameters
    + page: 1 (optional, number) - The page of profiles to return

### List Profiles [GET]

Retrive profiles.

+ Response 200 (application/json)

    + Headers

            Link: </profiles?page=2>; rel="next"

    + Body

            {
                "count": 3,
                "profiles": [
                    "vponte",
                    "cbrundo",
                    "dlecce"
                ]
            }
            
### Create a user Profile [POST]

+ Request (application/json)

        {
            "userName": "vponte",
            "mail": "v.ponte@wintech.it",
            "firstName": "Valerio",
            "lastName": "Ponte",
            "imageURL": "https://www.vlp.com/logo.png",
            "area": "Milano"
        }

+ Response 201

    + Headers

            Location: /profiles/vponte


## Profile details [/profiles/{userName}]

+ Parameters
    + userName: vponte (required, string) - ID of the user
    

### Read Profile Details [GET]

+ Response 200 (application/json)

        {
            "userName": "vponte",
            "mail": "v.ponte@wintech.it",
            "firstName": "Valerio",
            "lastName": "Ponte",
            "imageURL": "https://www.vlp.com/logo.png",
            "area": Milano,
            "postalAddress": {
                "street": "piazza Dergano 9",
                "cap": 20158,
                "city": "Milan",
                "country": "Italy"
            }, 
            "billingAddress": {
                "street": "piazza Dergano 9",
                "cap": 20158,
                "city": "Milan",
                "country": "Italy"
            }
        }

### Edit Profile details [PUT]

+ Request (application/json)

        {
            "userName": "vponte",
            "mail": "v.ponte@wintech.it",
            "firstName": "Valerio",
            "lastName": "Ponte",
            "imageURL": "https://www.vlp.com/logo.png",
            "area": "Milano",
            "postalAddress": {
                "street": "piazza Dergano 9",
                "cap": 20158,
                "city": "Milan",
                "country": "Italy"
            }, 
            "billingAddress": {
                "street": "piazza Dergano 9",
                "cap": 20158,
                "city": "Milan",
                "country": "Italy"
            }
        }
        
+ Response 200

### Delete Profile [DELETE]

+ Response 204

## User personal profile [/profiles/my]

Used to retrieve user personal details. Depending on whether the user is logged in or not,
data will be retrieved from DB or local cache.

### Read Profile Details [GET]

+ Response 200 (application/json)

        {
            "userName": "vponte",
            "mail": "v.ponte@wintech.it",
            "firstName": "Valerio",
            "lastName": "Ponte",
            "imageURL": "https://www.vlp.com/logo.png",
            "area": "Milano",
            "postalAddress": {
                "street": "piazza Dergano 9",
                "cap": 20158,
                "city": "Milan",
                "country": "Italy"
            }, 
            "billingAddress": {
                "street": "piazza Dergano 9",
                "cap": 20158,
                "city": "Milan",
                "country": "Italy"
            }
        }

# Group IS15 – Selected products

Resources related to user's selected products. 
An user can list its selected products, create a selection for his session and then edit it.

**Note**: Only one product per category (e.g. serramenti, pavimenti) can be selected
at a given time. If another product of the same category is selected, it will replace
the currently selected product.

## Selected products collections [/selections/my]

The following methods allow the user to interact with selected products.

A selected product is made of:

+ sku (string) - the product commerce SKU for which the quote is being prepared
+ attributes (object[string, string]) - a list of attributes selected on the product. 
  An attribute is represented as a key/value pair.
+ alternate_products (array[string]) - a list of alternative products (recommended
  by commerce). Each string is a commerce SKU.
+ alternate_selections (array) - a list of alternativce products selected by the user
  to be seen in the augmented reality. **TBD: still neded?**
+ type (enum[string]) - type of the selection (e.g. serramenti) 

### List Selections [GET]

This action retrieves the list of selected products.

+ Response 200 (application/json)

    + Body

            {
                "selections": [
                    {
                        "sku": "1",
                        "attributes": {
                            "color": "black",
                            "isolation": "high",
                            "material": "wood",
                            "attribute4": "value4",
                            "attribute5": "value5"
                        },
                        "alternate_products": ["2", "3"],
                        "alternate_selections": ["3", "4"],
                        "type": "serramenti"
                    },
                    {
                        "sku": "2",
                        "attributes": {
                            "color": "black",
                            "isolation": "high",
                            "material": "wood",
                            "attribute4": "value4",
                            "attribute5": "value5"
                        },
                        "alternate_products": ["2", "3"],
                        "alternate_selections": ["3", "4"],
                        "type": "pavimenti"
                    }
                ]
            }


### Create Selection [POST]

This action is used to create a new selection in the user's selection object. 
It will replace his current selection if he already has one in the same category.

**TBD: emit a warning when replacing a selection?**

+ Request (application/json)

        {
            "sku": "1",
            "attributes": {
                "color": "black",
                "isolation": "high",
                "material": "wood",
                "attribute4": "value4",
                "attribute5": "value5"
            },
            "alternate_products": ["2", "3"],
            "alternate_selections": ["3", "4"],
            "type": "serramenti"
        }

+ Response 201

    + Headers

            Location: /selections/my/serramenti

## Selected product details [/selections/my/{type}]

These actions operate on the selection of the required `type`.

+ Parameters
    + type: serramenti (required, enum[string]) - type of selection to operate on
        
        + Members
            + `serramenti`
            + `pavimenti`
            + `**TBD**`

### Read Selection details [GET]

+ Response 200 (application/json)

        {
            "sku": "1",
            "attributes": {
                "color": "black",
                "isolation": "high",
                "material": "wood",
                "attribute4": "value4",
                "attribute5": "value5"
            },
            "alternate_products": ["2", "3"],
            "alternate_selections": ["3", "4"]
        }

### Edit Selection [PUT]

+ Request (application/json)

        {
            "sku": "1",
            "attributes": {
                "color": "black",
                "isolation": "high",
                "material": "wood",
                "attribute4": "value4",
                "attribute5": "value5"
            },
            "alternate_products": ["2", "3"],
            "alternate_selections": ["3", "4"]
        }

+ Response 200

### Delete Selection [DELETE]

+ Response 204

# Group IS03 - Documents

Resources related to user's documents in the API. 
An user can list its previous documents, create a document and then edit it.

Document acts as a "super-class" for quotes and orders.

## Documents collections [/documents{?userName}{?page}{?type}]

The following methods allow the user to interact with documents.

+ Attributes
    + Include VLP
    + type: order (required, enum[string]) - type of the document
        + Members
            + `order`
            + `quote`
    + userId: vponte (optional, string) - user owning the document
    + formats: `["xml", "pdf"]` (optional, array) - list of available file formats
    + status (optional, enum[string]) - current status of the document
        + Members
            + `proposal`
            + `confirmed`
    + valid (optional, string)
    + documentReference (optional, string) - reference to another Document (e.g. quote from which an order originated)
    + documentCode (optional, string) - fpDealerID in case of document of type `quote`

### List Documents [GET]

This action retrieves the list of past documents, 
possibly sliced and filtered only for the specified `userName` and/or `type`.

+ Parameters
    + userName: vponte (optional, string) - Filter documents created by the specified `userName`
      i.e. that have `fpDealerId` set
    + page: 1 (optional, number) - The page of documents to return
    + type: quote (optional, enum[string]) - Type of document that is required
        + Members
            + `quote`
            + `order`


+ Response 200 (application/json)

    + Headers

            Link: </documents?page=2>; rel="next"

    + Body

            {
                "count": 3,
                "documents": [
                    {
                        "id": "1",
                        "type": "quote",
                        "documentCode": "1",
                        "userId": "vponte"
                    },
                    {
                        "id": "2",
                        "type": "quote",
                        "documentCode": "2",
                        "userId": "vponte"
                    },
                    {
                        "id": "3",
                        "type": "quote",
                        "documentCode": "3",
                        "userId": "vponte"
                    }
                ]
            }
            
### Create a Document [POST]

This method allows the user to create a new document.

If no `userId` is given, it is assumed that the document is created for the current user.

**Note**: the returned `Location` header points to the created document ID, 
not the given FP Dealer ID.

+ Attributes (Documents collections)

+ Request (application/json)

        {
            "type": "quote",
            "documentCode": "1",
            "userId": "vponte",
            "files": {"pdf": "a2F3YWlpIGRvY3VtZW50Cg=="}
        }

+ Response 201

    + Headers

            Location: /documents/2

## Documents details [/documents/{id}]

+ Parameters
    + id: 1 (required, string) - ID of the document

### Read Document details [GET]

See the details of a given document. This returns the single document istances with its
historic statuses.

+ Attributes (Documents collections)
    + status_hist (required, object) - past statuses of the document

+ Response 200 (application/json)

        {
            "type": "quote",
            "documentCode": "1",
            "status_hist": {
                "2015-05-01": "proposal",
                "2015-05-07": "confirmed"
            }
        }
### Edit Document details [PUT]

This action allows the user to change an existing document.

**Note**: When the current status of a document is changed, its historic status will have to be
recorded.

+ Request (application/json)

        {
            "type": "quote",
            "documentCode": "1"
        }

+ Response 200

### Delete Document [DELETE]

+ Response 204


## Document files [/documents/{id}/{format}]

API route for interacting with documents' filtes.

Create and update actions expect the file stream as input.

**Note**: when the available files change (CD actions) also the available `formats` field on the document
will get updated.

+ Parameters
    + id: 1 (required, string) - id of the document
    + format: pdf (required, string) - format of the file with which we're interacting

### Add file to document [POST]

This actions allow adding a new file to an existing document.

+ Request (application/pdf)

+ Response 201

    + Headers
    
            Location: /documents/2/pdf

### Download Document file [GET]

+ Response 200 (application/stream)

### Update Document file [PUT]

+ Request (application/pdf)

+ Response 200

### Delete Document file [DELETE]

+ Response 204

# Group Likes

**TBD: likes, view and wishes might become a single resource (i.e. Event)**

# Group IS12 - Views

## Views collections [/views{?userName}{?page}]

+ Parameters
    + userName: vponte (optional, string) - Filter orders created by the specified userName
    + page: 1 (optional, number) - The page of views to return

### List Views [GET]

Retrive content (e.g. stories, products) views, possibly filtered by `userName` and sliced.

+ Response 200 (application/json)

    + Headers

            Link: </views?page=2>; rel="next"

    + Body

            {
                "count": 3,
                "views": [
                    "1",
                    "2",
                    "3"
                ]
            }
            
### Create a content view [POST]

+ Request (application/json)

        {
            "id": "1",
            "contentID": "1",
            "title": "Storia 1",
            "URL": "https://www.vlp.com/wps/portal/stories/storia/1",
            "image_URL": "https://www.vlp.com/logo.png"
        }

+ Response 201

    + Headers

            Location: /views/1


## Views details [/views/{id}]

+ Parameters
    + id: 1 (required, string) - ID view event
    

### Read View Details [GET]

+ Response 200 (application/json)

        {
            "id": "1",
            "contentID": "1",
            "title": "Storia 1",
            "URL": "https://www.vlp.com/wps/portal/stories/storia/1",
            "image_URL": "https://www.vlp.com/logo.png"
        }

### Edit View details [PUT]

+ Request (application/json)

        {
            "id": "1",
            "contentID": "1",
            "title": "Storia 1",
            "URL": "https://www.vlp.com/wps/portal/stories/storia/1",
            "image_URL": "https://www.vlp.com/logo.png"
        }
        
+ Response 200

### Delete View [DELETE]

+ Response 204

# Group IS02 - Product Images

**Note**: Probably this group would be better managed as a sub-resource of a product resource. 
Since we have no API for products right now, 
we simply refer to this defining images as a sub-path of products.

## Product Images collections by product repository SKU [/products/{prSKU}/images]

+ Parameters
    + prSKU: 1 (required, string) - SKU on the product repository
    

### Create Product Image [POST]

**TBD: define actual JSON structure to create image. Shall we store path or content in DB?**

+ Request (application/json)

        {
            "type": "main",
            "URL": "https://www.vlp.com/logo.png"
        }

+ Response 201

    + Headers

            Location: /products/{prSKU}/images/1


## Product Image details by product repository SKU [/products/{prSKU}/images/{type}/{?index}]

+ Parameters
    + prSKU: 1 (required, string) - SKU on the product repository
    + index: 1 (optional, number) - for image lists (e.g. carousels) the
      index of the required image
    + type: main (required, enum[string]) - type of the image being required
        + Members
            + `main`
            + `banner`
            + `carousel`
            + `details`


### Read Product Image [GET]

+ Response 200 (image/png)

### Update Product Image [PUT]

**TBD: define actual JSON structure to create image. Shall we store path or content in DB?**

+ Request (application/json)

        {
            "type": "main",
            "URL": "https://www.vlp.com/logo.png"
        }

+ Response 200


### Delete Product Image [DELETE]

+ Response 204

## Find Product Images [/products/find/images/{type}/{?index}{?commerceSKU}{?attributes}]

+ Parameters
    + commerceSKU: 1 (required, string) - SKU on the commerce
    + attributes: {"color": "black", "isolation": "high", "material": "wood"} (required, object) - 
      attribute selection on the commerce SKU product
    + index: 1 (optional, number) - for image lists (e.g. carousels) the
      index of the required image
    + type: main (required, enum[string]) - type of the image being required
        + Members
            + `main`
            + `banner`
            + `carousel`
            + `details`


### Read Product Image [GET]

**TBD: this is a search / query. We should expect queries to return a collection of results. Change to that?**

+ Response 200 (image/png)

# Group IS09 - 3D

API group used to handle objects managed by the augmented reality 3D viewer.

The main resources managed are:

+ `Object`, an object rendered in a 3D environment
+ `Scene`, a 3D environment consisting of multiple objects

## Scenes collections [/scenes{?userName}{?page}]

**TBD: the current model for the Scene is based off the DB schema.
The meaning of some fields is unclear.**

+ Attributes
    + id: 1 (string)
    + description: `Scene description` (string)
    + userId: vponte (string)
    + height: 10.57 (number)
    + width: 60.24 (number)
    + length: 14.2 (number)
    + scene_type (enum) - type of the scene. **TBD: enum values**
        + Members
            + `kitchen`
            + `livingroom`
    + set (string)
    + time (string)
    + weather (string)
    + season (string)
    + sound (string) - **TBD: URL to a sound file?**

### List Scenes [GET]

+ Parameters
    + userName: vponte (optional, string) - filter scenes for the specified user
    + page: 1 (optional, number) - slice scenes
    
+ Response 200 (application/json)

        {
            "count": 2,
            "requests": [
                {
                    "id": "1",
                    "userId": "vponte",
                    "height": 5.7,
                    "width": 77
                },
                {
                    "id": "2",
                    "userId": "vponte",
                    "height": 5.7,
                    "width": 77
                }
            ]
        }
        
### Create Scene [POST]

+ Request (application/json)

        {
            "userId": "vponte",
            "height": 5.7,
            "width": 77
        }
        
+ Response 201

    + Headers
    
            Location: /scenes/1

## Scene details [/scenes/{id}]

+ Parameters
    + id: 1 (required, string) - ID of the scene

### Read Scene details [GET]

+ Response 200 (application/json)

    + Attributes (Scenes collections)

### Update Scene [PUT]

+ Request (application/json)

    + Attributes (Scenes collections)

+ Response 200

### Delete Scene [DELETE]

+ Response 204

## Object collections [/scenes/{id}/objects{?page}]

**TBD: on the DB schema there is no mention of components 
(static files or references to them). How do we manage those?**

**TBD: the current model for the Object is based off the DB schema.
The meaning of some fields is unclear.**

+ Attributes
    + id: 1 (string)
    + objectId: 6 (string) - **TBD: required?**
    + productID: 5 (string)
    + category (string)
    + type (string)
    + x: 10.6 (number) - position of the object on X axis
    + y: 1.6 (number) - position of the object on Y axis
    + z: 5.6 (number) - position of the object on Z axis
    + rx: 100.6 (number) - rotation of the object on X axis
    + ry: 10.6 (number) - rotation of the object on Y axis
    + rz: 50.6 (number) - rotation of the object on Z axis
    + s: 3 (number) - object scaling

+ Parameters
    + id: 1 (required, string) - ID of the scene

### List Scene Objects [GET]

+ Parameters
    + page: 1 (optional, number) - slice scene objects
    
+ Response 200 (application/json)

        {
            "count": 2,
            "requests": [
                {
                    "id": "1",
                    "sceneID": "4",
                    "productID": "3",
                    "x": 5.7,
                    "y": 77,
                    "z": 53, 
                    "rx": 5.7,
                    "ry": 77,
                    "rz": 53,
                    "s": 4
                },
                {
                    "id": "2",
                    "sceneID": "4",
                    "productID": "4",
                    "x": 5.7,
                    "y": 77,
                    "z": 53, 
                    "rx": 5.7,
                    "ry": 77,
                    "rz": 53,
                    "s": 4
                },
            ]
        }

### Add Object to Scene [POST]

+ Request (application/json)

        {
            "productID": "3",
            "x": 5.7,
            "y": 77,
            "z": 53, 
            "rx": 5.7,
            "ry": 77,
            "rz": 53,
            "s": 4
        }
        
+ Response 201

    + Headers
    
            Location: /scenes/1/objects/3
            

## Scene Objects details [/scenes/{sceneId}/objects/{id}]

+ Parameters
    + sceneId: 1 (required, string) - ID of the scene
    + id: 1 (required, string) - ID of the object

### Read Scene Object details [GET]

+ Response 200 (application/json)

    + Attributes (Object collections)

### Update Scene Object [PUT]

+ Request (application/json)

    + Attributes (Object collections)

+ Response 200

### Delete Scene Object [DELETE]

+ Response 204

# Group IS07 - Contact Requests

API group used to handle users' contact requests.

**TBD: the current model for the Contact Request is based off the DB schema.
The meaning of some fields is unclear.**

**TBD: shouldn't Contact request have a status? Will they just be deleted from the DB
once they are handled?**

## Contacts collections [/contacts{?userName}{?page}]

+ Attributes
    + id: 1 (string)
    + userId: vponte (string)
    + description: `Hi, please contact me` (string)
    + reason (enum)
    + date: `2015-05-01` (string)
    + timestamp: 123451325 (number)
    + time_zone (string)
    + note: `Hi, please contact me` (string)

### List Contacts [GET]

+ Parameters
    + userName: vponte (optional, string) - filter contact requests for the specified user
    + page: 1 (optional, number) - slice contact requests
    
+ Response 200 (application/json)

        {
            "count": 1,
            "requests": [
                {
                    "id": "1",
                    "userId": "vponte",
                    "reason": "Unknown",
                    "note": "Hi, please contact me"
                }
            ]
        }

### Create Contact [POST]

+ Request (application/json)

        {
            "userId": "vponte",
            "reason": "Unknown",
            "note": "Hi, please contact me"
        }
        
+ Response 201

    + Headers
    
            Location: /contacts/1

## Contacts details [/contacts/{id}]

+ Parameters
    + id: 1 (required, string) - ID of the contact request with which interact

### Read Contact [GET]

+ Response 200 (application/json)

    + Attributes (Contacts collections)

### Update Contact [PUT]

+ Request (application/json)

    + Attributes (Contacts collections)

+ Response 200

### Delete Contact [DELETE]

+ Response 204