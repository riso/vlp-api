FORMAT: 1A
HOST: https://webapps.vlp.com/

# VLP v1

Service Oriented Architecture specified for the VLP project.

# VLP [/{?backends}]

This resource does not have any attributes. Instead it offers the initial
API affordances in the form of the links in the JSON body.

It is recommend to follow the “url” link values,
[Link](https://tools.ietf.org/html/rfc5988) or Location headers where
applicable to retrieve resources. Instead of constructing your own URLs,
to keep your client decoupled from implementation details.

Dates are always specified as `yyyy-mm-dd`, times as `HH:mm:ss:SSS`, according to
[Java SimpleDateFormat](https://docs.oracle.com/javase/8/docs/api/java/text/SimpleDateFormat.html).

**TBD: time zone?**

+ Parameters
    + backends: ["cache", "db"] (required, array) from which backends the resource is coming from. Possible values are (`cache`, `db`, `ldap`, `connections`, `commerce`)

+ Attributes
    + backends: `["cache", "db"]` (required, array[string]) - to which backends the resource is being saved to. Possible values are (`cache`, `db`, `ldap`, `connections`, `commerce`)

## Retrieve the Entry Point [GET]

+ Response 200 (application/json)

        {
            "profile_url": "/profiles",
            "selections_url": "/selections/my",
            "events_url": "/events",
            "products_url": "/products",
            "documents_url": "/documents",
            "ar_url": "/ar",
            "contacts_url": "/contacts"
        }

## Collection [/collection]
"Abstract" resource used to represent a generic collection. Other resources
include this one in their collection endpoints.

+ Attributes
  + count: 1 (number) - total number of resources that can be accessed by the user



#######################
# Group IS01 - Profiles
#######################

Resources related to user's profile in the API.

## Profiles collections [/profiles{?page}]

+ Attributes
  + Include Collection
  + profiles (array[Profile]) - array of returned profiles

### List Profiles [GET]

+ Parameters
    + page: 1 (optional, number) - The page of profiles to return

+ Response 200 (application/json)

    + Headers

            Link: </profiles?page=2>; rel="next"

    + Attributes (Profiles collections)

### Create Profile [POST]
Create a user profile. `id`, if provided, is ignored.

+ Request (application/json)
    + Attribute (Profile)

+ Response 201

    + Headers

            Location: /profiles/1

## Profile [/profiles/{id}]

+ Parameters
    + id: 1 (required, number) - ID of the user

+ Attributes
    + id: 1 (required, number) - ID of the user profile
    + email: `v.ponte@wintech.it` (string)
    + firstName: Valerio (string)
    + lastName: Ponte (string)
    + phoneNumber: `0039-3401004285` (string) - A string with the following format: `<4 digits country code>-<phone number>`
    + imageUrl: `https://www.vlp.com/logo.png` (string) - user profile image
    + description (string)
    + area: Milano (string) - position shared by the user
    + address (string) - **TBD: what is this?**
    + city (string) - **TBD: what is this?**
    + addresses (array[Profile Address]) - array of user addresses
    + type: client (enum[string]) - profile type **TBD: needed?**
        + client (string) - registered user with email
        + lead (string) - unregistered user with email
        + anonymous (string) - unregistered user without email

### Read Profile [GET]

+ Response 200 (application/json)

    + Attributes (Profile)

### Edit Profile [PUT]

+ Request (application/json)

    + Attributes (Profile)

+ Response 200

### Delete Profile [DELETE]

+ Response 204

## User personal profile [/profiles/my]

Used to retrieve user personal details. Depending on whether the user is logged in or not,
data will be retrieved from DB or local cache.

**TBD: needed? theoretically we could list profiles, which for normal users
would return only the user's personal profile. Is this true? maybe we want
other normal users to list other users. Moreover 'admin' users will be able to
list all users, what about them? Maybe this is needed after all.**

### Read Profile [GET]

+ Response 200 (application/json)
  + Attributes (Profile)


## Profile Addresses collections [/profiles/{userId}/addresses{?page}]

+ Attributes
  + count: 1 (number) - total number of addresses
  + addresses (array[Profile Address]) - array of user addresses

### List Profile Addresses [GET]

+ Parameters
  + userId: 1 (required, number) - ID of the user
  + page: 1 (optional, number) - The page of addresses to return

+ Response 200 (application/json)

      + Headers

              Link: </profiles/1/addresses?page=2>; rel="next"

      + Attributes (Profile Addresses collections)

### Create Profile Address [POST]

  + Request (application/json)
      + Attribute (Profile Address)

  + Response 201

      + Headers

              Location: /profiles/1/addresses/1

## Profile Address [/profiles/{userId}/addresses/{id}]

+ Parameters
    + userId: 1 (required, number) - ID of the user
    + id: 1 (required, number) - ID of the address

+ Attributes
    + id: 1 (required, number) - ID of the address
    + userId: 1 (required, number) - ID of the user owning this address
    + type: postal (required, enum[string])
        + postal
        + billing
        + postalBilling - **TBD: probably not the best idea**
    + description: `My home address` (string)
    + address: `Piazza Dergano 9` (string)
    + zipCode: 20158 (number)
    + city: Milano (string)
    + country: Italia (string)
    + phoneNumber: `0039-3401004285` (string) - A string with the following format: `<4 digits country code>-<phone number>`
    + vatCode (string)
    + fiscalCode (string)
    + companyName (string)
    + firstName (string) - **TBD: why?**
    + lastName (string) - **TBD: why?**
    + email (string) - **TBD: why?**

### Read Profile Address [GET]

+ Response 200 (application/json)

    + Attributes (Profile Address)

### Update Profile Address [PUT]

+ Request (application/json)

    + Attributes (Profile Address)

+ Response 200

### Delete Profile Address [DELETE]

+ Response 204



#########################
# Group IS15 – Selections
#########################

Resources related to user's selected products.
An user can list its selected products, create a selection for his session and then edit it.

**Note**: Only one product per category (e.g. serramenti, pavimenti) can be selected
at a given time. If another product of the same category is selected, it will replace
the currently selected product.

## Selections collections [/selections/my]

The following methods allow the user to interact with selected products.

+ Attributes
    + selections (array[Selection]) - selections perfomed by the user

### List Selections [GET]

This action retrieves the list of selected products.

+ Response 200 (application/json)

    + Attributes (Selections collections)

### Create Selection [POST]

This action is used to create a new selection in the user's selection object.
It will replace his current selection if he already has one in the same category.

**TBD: emit a warning when replacing a selection?**

+ Request (application/json)

  + Attributes (Selection)

+ Response 201

    + Headers

            Location: /selections/my/serramenti

## Selection [/selections/my/{type}]

These actions operate on the selection of the required `type`.

+ Parameters
    + type: serramenti (required, enum[string]) - type of selection to operate on

        + Members
            + `serramenti`
            + `pavimenti`
            + `**TBD**`

+ Attributes
    + sku: 1 (string) - the product commerce SKU for which the quote is being prepared
    + attributes: `{"color": "black", "isolation": "high"}` (object) - an object of attributes selected on the product. An attribute is represented as a key/value pair.

        + Properties
            + color: black
            + isolation: high
            + material: wood
            + attribute4: value4

    + alternate_products: `["2", "3"]` (array) - an array of alternative products (recommended by commerce). Each string is a commerce SKU.

        + Items
            + 2
            + 3

    + alternate_selections: `["3", "4"]` (array) - an array of alternative products selected by the user to be seen in the augmented reality. **TBD: still neded?**

        + Items
            + 3
            + 4

    + type: serramenti (enum) - type of the selection
        + serramenti
        + pavimenti
        + TBD

### Read Selection [GET]

+ Response 200 (application/json)

    + Attributes (Selection)

### Update Selection [PUT]

+ Request (application/json)

    + Attributes (Selection)

+ Response 200

### Delete Selection [DELETE]

+ Response 204



########################
# Group IS03 - Documents
########################

Resources related to user's documents in the API.
An user can list its previous documents, create a document and then edit it.

Document acts as a "super-class" for quotes and orders.

## Basic Document [/documents/dummy]

**Note: This is not displayed anywhere in the published docs**

This represent the basic structure of a document, shared both by collections and
details actions.

+ Attributes
    + id: 1 (number)
    + type: order (required, enum) - type of the document
        + Members
            + order
            + quote

    + userId: 1 (number) - user owning the document
    + formats: `["xml", "pdf"]` (array) - list of available file formats
        + Items
            + xml
            + pdf
    + status (enum[string]) - current status of the document
        + Members
            + proposal
            + confirmed
            + editable - if the document can be still modified or has been frozen

    + valid (string) - **TBD: what is this?**
    + documentReference: 3 (string) - reference to another Document (e.g. quote from which an order originated)
    + documentCode: 1 (string) - fpDealerID in case of document of type `quote`


## Documents collections [/documents{?userName}{?page}{?type}]

The following methods allow the user to interact with documents.

+ Attributes
    + Include Collection
    + documents: (array[Basic Document]) - array of documents accessible by the user

### List Documents [GET]

This action retrieves the list of documents accessible by the user,
possibly sliced and filtered only for the specified `userId` and/or `type`.

+ Parameters
    + userId: 1 (number) - Filter documents created by the specified `userId`
    + page: 1 (number) - The page of documents to return
    + type: quote (enum[string]) - Filter only specified type of document
        + Members
            + `quote`
            + `order`


+ Response 200 (application/json)

    + Headers

            Link: </documents?page=2>; rel="next"

    + Attributes (Documents collections)

### Create Document [POST]

This method allows the user to create a new document.

If no `userId` is given, it is assumed that the document is created for the current user.

**Note**: the returned `Location` header points to the created document ID,
not the given FP Dealer ID.

+ Request (application/json)
    + Attributes (Document)

+ Response 201

    + Headers

            Location: /documents/2

## Document [/documents/{id}]

+ Parameters
    + id: 1 (required, string) - ID of the document

+ Attributes
  + Include Basic Document
  + status_hist (object) - past statuses of the document
      + Properties
         + *20150501*: proposal
         + *20150508*: confirmed

### Read Document [GET]

See the details of a given document. This returns the single document
istances with its historic statuses.

+ Response 200 (application/json)

    + Attributes (Document)

### Update Document [PUT]

This action allows the user to change an existing document.

**Note**: When the current status of a document is changed, its historic
statuses will have to be recorded.

+ Request (application/json)
    + Attributes (Document)

+ Response 200

### Delete Document [DELETE]

+ Response 204


## Document File [/documents/{id}/{format}]

API route for interacting with documents' files.

Create and update actions expect the file stream as input.

**Note**: when the available files change (CD actions) also the available
`formats` field on the document will get updated.

+ Parameters
    + id: 1 (required, string) - id of the document
    + format: pdf (required, string) - format of the file with which we're interacting

### Create Document File [POST]

This actions allow adding a new file to an existing document.

+ Request (application/pdf)

+ Response 201

    + Headers

            Location: /documents/2/pdf

### Read Document File [GET]

+ Response 200 (application/stream)

### Update Document File [PUT]

+ Request (application/pdf)

+ Response 200

### Delete Document File [DELETE]

+ Response 204



#####################
# Group IS12 - Events
#####################

## Events collections [/events{?userName}{?page}{?type}]

+ Attributes
    + count: 1 (number) - total number of events
    + events (array[Event]) - array of returned events

### List Events [GET]

Retrive content (e.g. stories, products) events, possibly filtered by `userName`
and/or `type` and sliced.

+ Parameters
    + userName: vponte (optional, string) - Filter events created by the specified userName
    + type: vote (optional, enum[string]) - Filter only specified type of event
        + Members
            + `view` - content visualization
            + `vote` - content up or down vote
            + `desire` - content desired
    + page: 1 (optional, number) - The page of events to return

+ Response 200 (application/json)

    + Headers

            Link: </events?page=2>; rel="next"

    + Attributes (Events collections)

### Create Event [POST]

+ Request (application/json)
    + Attribute (Event)

+ Response 201

    + Headers

            Location: /events/1

## Event [/events/{id}]

+ Attributes
    + id: 1 (string) - ID of the event
    + contentId: 1 (string) - ID of the content for which the event is being recorded
    + type: `vote` (enum) - type of event
        - view
        - vote
        - desire
    + value: `-1` (number) - value of the event (only valid for event of type `vote`)
    + title: `Storia 1` (string)
    + URL: `https://www.vlp.com/wps/portal/stories/storia/1` (string)
    + image_URL: `https://www.vlp.com/logo.png` (string)
    + contentType: `vote` (enum) - type of the content (`view`, `vote`, `desire`) for which the event is being recorded
    + timestamp: `546757636535` (number) - date of the event

+ Parameters
    + id: 1 (required, string) - ID of the event

### Read Event [GET]

+ Response 200 (application/json)
    + Attributes (Event)

### Update Event [PUT]

+ Request (application/json)
    + Attributes (Event)

+ Response 200

### Delete Event [DELETE]

+ Response 204



#######################
# Group IS17 - Products
#######################

API group used to handle products.

## Product [/products/{id}]

+ Attributes
    + id: 5 (string) - ID of the product in the product repository
    + default_scene (string) - default scene that can be used to render this product in the 3D viewer

## Products collections [/products]

**TBD: the model of a Product is currently unknown. Check on DB schema.**

+ Attributes
    + products (array[Product])

### Find products [GET /find{?commerceSKU}{?attributes}]

Action that can be used to find a product in the repository starting
from the commerce SKU and the selections (map of attributes).

This action can be used to retrieve the Product repository ID that can later be used to
retrieve images and renderings.

+ Parameters
    + commerceSKU: 1 (required, string) - SKU on the commerce
    + attributes: {"color": "black", "isolation": "high", "material": "wood"} (required, object) -
      attribute selection on the commerce SKU product

+ Response 200 (application/json)
    + Attributes (Products collections)



#############################
# Group IS02 - Product Images
#############################

**Note**: Probably this group would be better managed as a sub-resource of a product resource.
Since we have no API for products right now,
we simply refer to this defining images as a sub-path of products.

## Product Images collections [/products/{prSKU}/images]

+ Parameters
    + prSKU: 1 (required, string) - SKU on the product repository


### Create Product Image [POST]

**TBD: define actual JSON structure to create image. Shall we store path or content in DB?**

+ Request (application/json)

        {
            "type": "main",
            "URL": "https://www.vlp.com/logo.png"
        }

+ Response 201

    + Headers

            Location: /products/{prSKU}/images/1


## Product Image details [/products/{prSKU}/images/{type}/{?index}]

+ Parameters
    + prSKU: 1 (required, string) - SKU on the product repository
    + index: 1 (optional, number) - for image lists (e.g. carousels) the
      index of the required image
    + type: main (required, enum[string]) - type of the image being required
        + Members
            + `main`
            + `banner`
            + `carousel`
            + `details`


### Read Product Image [GET]

+ Response 200 (image/png)

### Update Product Image [PUT]

**TBD: define actual JSON structure to create image. Shall we store path or content in DB?**

+ Request (application/json)

        {
            "type": "main",
            "URL": "https://www.vlp.com/logo.png"
        }

+ Response 200


### Delete Product Image [DELETE]

+ Response 204



#################################
# Group IS08 - Product Renderings
#################################

**Note**: Probably this group would be better managed as a sub-resource of a product resource.
Since we have no API for products right now,
we simply refer to this defining renderingsas a sub-path of products.

## Product Rendering [/products/{prSKU}/rendering]

**TBD: the entire model for a rendering is currently unknown. Check on Product repository schema**

+ Attributes
    + model (string) - 3D model
    + materials (number) - number of materials composing the rendering
    + parts (number) - number of parts composing the rendering
    + x (number) - default X axis position for the rendering
    + y (number) - default Y axis position for the rendering
    + z (number) - default Z axis position for the rendering
    + rx (number) - default rotation on X axis for the rendering
    + ry (number) - default rotation on Y axis for the rendering
    + rz (number) - default rotation on Z axis for the rendering
    + s (number) - default scale of the rendering

+ Parameters
    + prSKU: 1 (required, string) - SKU on the product repository

### Create Product Rendering [POST]

+ Request (application/json)
    + Attributes (Product Rendering)

+ Response 201

    + Headers

            Location: /products/1/rendering

### Read Product Rendering [GET]

+ Response 200 (application/json)
    + Attributes (Product Rendering)

### Update Product Rendering [PUT]

+ Request (application/json)
    + Attributes (Product Rendering)

+ Response 200

### Delete Product Rendering [DELETE]

+ Response 204

## Product Rendering Materials details [/products/{prSKU}/rendering/materials/{index}]

**TBD: the entire model for a rendering material is currently unknown.
We assume a material to be an image.
Check on Product repository schema**

+ Parameters
    + prSKU: 1 (required, string) - SKU on the product repository
    + index: 2 (required, number) - interact with the nth material

### Create Product Rendering Material [POST]

+ Request (application/png)

+ Response 201

    + Headers

            Location: /products/1/rendering/materials/1

### Read Product Rendering Material [GET]

+ Response 200 (application/png)

### Update Product Rendering Material [PUT]

+ Request (application/png)

+ Response 200

### Delete Product Rendering Material [DELETE]

+ Response 204

## Product Rendering Parts details [/products/{prSKU}/rendering/parts/{index}]

**TBD: the entire model for a rendering part is currently unknown.
We assume a part to be an image.
Check on Product repository schema**

+ Parameters
    + prSKU: 1 (required, string) - SKU on the product repository
    + index: 2 (required, number) - interact with the nth part

### Create Product Rendering Part [POST]

+ Request (application/png)

+ Response 201

    + Headers

            Location: /products/1/rendering/parts/1

### Read Product Rendering Part [GET]

+ Response 200 (application/png)

### Update Product Rendering Part [PUT]

+ Request (application/png)

+ Response 200

### Delete Product Rendering Part [DELETE]

+ Response 204



#################
# Group IS09 - 3D
#################

API group used to handle objects managed by the augmented reality 3D viewer.

The main resources managed are:

+ `Object`, an object rendered in a 3D environment
+ `Scene`, a 3D environment consisting of multiple objects

## Scenes collections [/ar/scenes{?userName}{?page}]

**TBD: the current model for the Scene is based off the DB schema.
The meaning of some fields is unclear.**

+ Attributes
    + id: 1 (string)
    + description: `Scene description` (required, string)
    + userId: vponte (string)
    + height: 10.57 (number)
    + width: 60.24 (number)
    + length: 14.2 (number)
    + scene_type (enum) - type of the scene. **TBD: enum values**
        + Members
            + `kitchen`
            + `livingroom`
    + set (string)
    + time (string)
    + weather (string)
    + season (string)
    + sound (string) - **TBD: URL to a sound file?**

### List Scenes [GET]

+ Parameters
    + userName: vponte (optional, string) - filter scenes for the specified user
    + page: 1 (optional, number) - slice scenes

+ Response 200 (application/json)

        {
            "count": 2,
            "requests": [
                {
                    "id": "1",
                    "userId": "vponte",
                    "height": 5.7,
                    "width": 77
                },
                {
                    "id": "2",
                    "userId": "vponte",
                    "height": 5.7,
                    "width": 77
                }
            ]
        }

### Create Scene [POST]

+ Request (application/json)

        {
            "userId": "vponte",
            "height": 5.7,
            "width": 77
        }

+ Response 201

    + Headers

            Location: /scenes/1

## Scene details [/ar/scenes/{id}]

+ Parameters
    + id: 1 (required, string) - ID of the scene

### Read Scene details [GET]

+ Response 200 (application/json)

    + Attributes (Scenes collections)

### Update Scene [PUT]

+ Request (application/json)

    + Attributes (Scenes collections)

+ Response 200

### Delete Scene [DELETE]

+ Response 204

## Object collections [/ar/objects{?page}{?sceneID}]

**TBD: on the DB schema there is no mention of components
(static files or references to them). How do we manage those?**

**TBD: the current model for the Object is based off the DB schema.
The meaning of some fields is unclear.**

+ Attributes
    + id: 1 (string)
    + sceneID (string) - ID of the associated scene, if present
    + objectID: 6 (string) - **TBD: required?**
    + productID: 5 (string)
    + category (string)
    + type (string)
    + x: 10.6 (number) - position of the object on X axis
    + y: 1.6 (number) - position of the object on Y axis
    + z: 5.6 (number) - position of the object on Z axis
    + rx: 100.6 (number) - rotation of the object on X axis
    + ry: 10.6 (number) - rotation of the object on Y axis
    + rz: 50.6 (number) - rotation of the object on Z axis
    + s: 3 (number) - object scaling

+ Parameters
    + sceneID: 1 (optional, string) - Filter only object belonging to the specified scene

### List Scene Objects [GET]

+ Parameters
    + page: 1 (optional, number) - slice scene objects

+ Response 200 (application/json)

        {
            "count": 2,
            "requests": [
                {
                    "id": "1",
                    "sceneID": "4",
                    "productID": "3",
                    "x": 5.7,
                    "y": 77,
                    "z": 53,
                    "rx": 5.7,
                    "ry": 77,
                    "rz": 53,
                    "s": 4
                },
                {
                    "id": "2",
                    "sceneID": "4",
                    "productID": "4",
                    "x": 5.7,
                    "y": 77,
                    "z": 53,
                    "rx": 5.7,
                    "ry": 77,
                    "rz": 53,
                    "s": 4
                },
            ]
        }

### Add Object to Scene [POST]

+ Request (application/json)

        {
            "productID": "3",
            "x": 5.7,
            "y": 77,
            "z": 53,
            "rx": 5.7,
            "ry": 77,
            "rz": 53,
            "s": 4
        }

+ Response 201

    + Headers

            Location: /ar/objects/3


## Objects details [/ar/objects/{id}{?sceneId}]

+ Parameters
    + id: 1 (required, string) - ID of the object

### Read Object details [GET]

+ Response 200 (application/json)

    + Attributes (Object collections)

### Update Object [PUT]

+ Request (application/json)

    + Attributes (Object collections)

+ Response 200

### Delete Object [DELETE]

+ Response 204


## Surfaces collections [/ar/scenes/{sceneID}/surfaces{?page}]

+ Attributes
    + count: 1 (number) - total number of surface
    + surfaces (array[Surface]) - array of returned surfaces

### List Surfaces [GET]

+ Parameters
    + sceneID: 5 (required, number) - ID scene
    + page: 1 (number) - The page of events to return

+ Response 200 (application/json)

    + Headers

            Link: </ar/scenes/1/surfaces?page=2>; rel="next"

    + Attributes (Surfaces collections)

### Add a Surface to Scene [POST]

+ Request (application/json)
    + Attribute (Surface)

+ Response 201

    + Headers

            Location: /ar/scenes/1/surfaces/1

## Surface [/ar/scenes/{sceneID}/surfaces/{id}]

+ Attributes
    + id: 1 (number) - ID of the surface
    + sceneID: 1 (number) - ID of the scene owning the surface
    + surfaceID (string)
    + materialID (string)

+ Parameters
    + sceneID: 5 (required, number) - ID scene
    + id: 1 (required, string) - ID of the surface

### Read a Surface [GET]

+ Response 200 (application/json)
    + Attribute (Surface)

### Update a Surface [PUT]

+ Request (application/json)
    + Attribute (Surface)

+ Response 200

### Delete a Surface [DELETE]

+ Response 204



###############################
# Group IS07 - Contact Requests
###############################

API group used to handle users' contact requests.

**TBD: the current model for the Contact Request is based off the DB schema.
The meaning of some fields is unclear.**

## Contacts collections [/contacts{?userName}{?page}]

+ Attributes
    + id: 1 (string)
    + userId: vponte (string)
    + description: `Hi, please contact me` (string)
    + reason (enum)
    + date: `2015-05-01` (string)
    + timestamp: 123451325 (number)
    + time_zone (string) - user range availabilty
    + note: `Hi, please contact me` (string)

### List Contacts [GET]

+ Parameters
    + userName: vponte (optional, string) - filter contact requests for the specified user
    + page: 1 (optional, number) - slice contact requests

+ Response 200 (application/json)

        {
            "count": 1,
            "requests": [
                {
                    "id": "1",
                    "userId": "vponte",
                    "reason": "Unknown",
                    "note": "Hi, please contact me"
                }
            ]
        }

### Create Contact [POST]

+ Request (application/json)

        {
            "userId": "vponte",
            "reason": "Unknown",
            "note": "Hi, please contact me"
        }

+ Response 201

    + Headers

            Location: /contacts/1

## Contacts details [/contacts/{id}]

+ Parameters
    + id: 1 (required, string) - ID of the contact request with which interact

### Read Contact [GET]

+ Response 200 (application/json)

    + Attributes (Contacts collections)

### Update Contact [PUT]

+ Request (application/json)

    + Attributes (Contacts collections)

+ Response 200

### Delete Contact [DELETE]

+ Response 204



##########################
# Group IS16 - Persistence
##########################

## Persist anonymous user data [/persist]

This action persist user data saved on DB and associated with anonymoud GUID by re-associating them
with the logged in user ID.

This works only on user ID fields by doing the following:

+ finds the authenticated profile user ID from mail given when authenticating
+ modifies data associated with the anonymous profile re-associating them with the found profile
+ deletes the anonymous user profile

**Note**: this service must be available only to authenticated users. If it is accessed by
an anonymous user, it will fail since it won't find an email in the user profile.

+ Attributes
    + mail: `v.ponte@wintech.it` (required, string)

### Persist [PUT]

+ Request (application/json)
    + Attributes (Persist anonymous user data)

+ Response 200
